---

- name: hadoop_namenode_dfs_namenode_name_dir
  file:
    path: "{{ hadoop_namenode_dfs_namenode_name_dir }}"
    state: directory
    owner: "{{ hadoop_namenode_user }}"
    group: "{{ hadoop_namenode_group }}"

- command: "hdfs haadmin -getServiceState {{ hadoop_namenode_master }}"
  register: hdfs_haadmin_getservicestate_master
  become: yes
  become_user: "{{ hadoop_namenode_user }}"
  become_method: sudo
  changed_when: false
  failed_when: false

- command: "hdfs haadmin -getServiceState {{ hadoop_namenode_slave }}"
  register: hdfs_haadmin_getservicestate_slave
  become: yes
  become_user: "{{ hadoop_namenode_user }}"
  become_method: sudo
  changed_when: false
  failed_when: false

- set_fact:
    format_needed_on_master: false

- set_fact:
    format_needed_on_master: true
  when: "{{ hadoop_namenode_master == ansible_hostname and not 'active' in hdfs_haadmin_getservicestate_slave.stdout }}"

# format when
# - the node is defined as master
# - the slave is not in 'active' state
# - "{{ hadoop_namenode_dfs_namenode_name_dir }}/current/VERSION" does not exist
#
# this task is supposed to be invoked when the master is initially
# provisioned

- command: hdfs namenode -format -nonInteractive -force
  args:
    creates: "{{ hadoop_namenode_dfs_namenode_name_dir }}/current/VERSION"
  become: yes
  become_user: "{{ hadoop_namenode_user }}"
  become_method: sudo
  register: hdfs_namenode_format
  when: "{{ hadoop_namenode_master == ansible_hostname and format_needed_on_master }}"

# bootstrap master when:
# - the node is defined as master
# - the slave is in 'acitve' state
# - "{{ hadoop_namenode_dfs_namenode_name_dir }}/current/VERSION" does not exist
#
# this task is supposed to be invoked when:
# - the master has been deleted
# - the master is being provisioned

- command: hdfs namenode -bootstrapStandby -nonInteractive -force
  args:
    creates: "{{ hadoop_namenode_dfs_namenode_name_dir }}/current/VERSION"
  become: yes
  become_user: "{{ hadoop_namenode_user }}"
  become_method: sudo
  when: "{{ hadoop_namenode_master == ansible_hostname and 'active' in hdfs_haadmin_getservicestate_slave.stdout }}"

# bootstrap slave when:
# - the node is defined as slave
# - "{{ hadoop_namenode_dfs_namenode_name_dir }}/current/VERSION" does not exist

- command: hdfs namenode -bootstrapStandby -nonInteractive
  args:
    creates: "{{ hadoop_namenode_dfs_namenode_name_dir }}/current/VERSION"
  become: yes
  become_user: "{{ hadoop_namenode_user }}"
  become_method: sudo
  when: "{{ hadoop_namenode_slave == ansible_hostname }}"

